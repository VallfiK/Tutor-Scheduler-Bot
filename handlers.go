package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
func handleStart(msg *tgbotapi.Message) {
	const teacherID = —Ç—É—Ç // –í–∞—à Telegram ID

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	if lastID, exists := lastMessageID[msg.Chat.ID]; exists {
		deleteMessage(msg.Chat.ID, lastID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	exists, err := userExists(msg.Chat.ID)
	if err != nil {
		sendMessage(msg.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if !exists {
		var role string
		if msg.Chat.ID == teacherID {
			role = "teacher"
		} else {
			role = "student"
		}
		err := registerUser(msg.Chat.ID, role, msg.From.UserName)
		if err != nil {
			sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			return
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
	user, err := getUser(msg.Chat.ID)
	if err != nil {
		sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	if user.Role == "teacher" {
		showTeacherMenu(msg.Chat.ID)
	} else {
		showStudentMenu(msg.Chat.ID)
	}
}

// –ú–µ–Ω—é –¥–ª—è —É—á–∏—Ç–µ–ª—è
func showTeacherMenu(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	unreadCount, err := countUnreadNotifications(chatID)
	if err != nil {
		unreadCount = 0
	}

	text := fmt.Sprintf("üë®‚Äçüè´ *–ú–µ–Ω—é —É—á–∏—Ç–µ–ª—è*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\nüì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %d", unreadCount)
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", "teacher_schedule"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–µ–Ω–∏–∫–æ–≤", "teacher_students"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", "add_slot"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (%d)", unreadCount), "notifications"),
		),
	)
	sendMessageWithKeyboard(chatID, text, &buttons)
}

// –ú–µ–Ω—é –¥–ª—è —É—á–µ–Ω–∏–∫–∞
func showStudentMenu(chatID int64) {
	text := "üë®‚Äçüéì *–ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", "student_book"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "student_bookings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "student_cancel"),
		),
	)
	sendMessageWithKeyboard(chatID, text, &buttons)
}

func sendTemporaryNotification(teacherID int64, message string) {
	err := addNotification(teacherID, message)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err)
		return
	}

	msg := tgbotapi.NewMessage(teacherID, message) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ "–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
	newMsg, err := bot.Send(msg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
	go func(chatID int64, msgID int) {
		time.Sleep(5 * time.Second)
		deleteMessage(chatID, msgID)
	}(teacherID, newMsg.MessageID)
}

func handleCallback(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID
	data := query.Data

	user, err := getUser(chatID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	if user.Role == "teacher" && data != "notifications" && data != "delete_schedule" && !strings.HasPrefix(data, "mark_read_") && data != "clear_notifications" {
		deleteMessage(chatID, messageID)
	}

	switch data {
	case "back_to_menu":
		if user.Role == "teacher" {
			showTeacherMenu(chatID)
		} else {
			showStudentMenu(chatID)
		}
	case "teacher_schedule":
		go handleTeacherSchedule(chatID)
	case "teacher_students":
		go handleTeacherStudents(chatID)
	case "add_slot":
		fmt.Println("Handling 'add_slot' for chatID:", chatID) // –û—Ç–ª–∞–¥–∫–∞
		showMonthCalendar(chatID, time.Now().Year(), time.Now().Month())
	case "student_book":
		showStudentMonthCalendar(chatID, time.Now().Year(), time.Now().Month())
	case "student_bookings":
		go handleStudentBookings(chatID)
	case "student_cancel":
		go handleStudentCancel(chatID)
	case "back_to_calendar":
		showMonthCalendar(chatID, time.Now().Year(), time.Now().Month())
	case "delete_schedule":
		handleDeleteSchedule(chatID, messageID)
	case "notifications":
		go func() {
			notifications, err := getTeacherNotifications(chatID)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
				return
			}
			if len(notifications) == 0 {
				buttons := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
					),
				)
				sendMessageWithKeyboard(chatID, "üì¨ –£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", &buttons)
				return
			}
			var builder strings.Builder
			builder.WriteString("üì¨ *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n")
			var buttons [][]tgbotapi.InlineKeyboardButton
			for _, n := range notifications {
				status := "üîî"
				if n.IsRead {
					status = "‚úÖ"
				}
				builder.WriteString(fmt.Sprintf("%s %s\n", status, n.Message))
				if !n.IsRead {
					buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData(
							fmt.Sprintf("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º: %s", formatTime(n.CreatedAt)),
							fmt.Sprintf("mark_read_%d", n.ID),
						),
					))
				}
			}
			buttons = append(buttons,
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", "clear_notifications"),
					tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
				),
			)
			keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
			sendMessageWithKeyboard(chatID, builder.String(), &keyboard)
		}()
	default:
		if data == "ignore" {
			return
		}
		if strings.HasPrefix(data, "confirm_reminder_") {
			scheduleIDStr := strings.TrimPrefix(data, "confirm_reminder_")
			scheduleID, err := strconv.ParseInt(scheduleIDStr, 10, 64)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
				fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ scheduleID:", err, "scheduleIDStr:", scheduleIDStr)
				return
			}

			fmt.Println("Confirmed reminder for schedule ID:", scheduleID, "chatID:", chatID)
			if lastID, exists := lastMessageID[chatID]; exists {
				deleteMessage(chatID, lastID)
				fmt.Println("Deleted previous message ID:", lastID)
			} else {
				fmt.Println("No previous message found in lastMessageID for chatID:", chatID)
			}
			showStudentMenu(chatID)
			return
		}

		if strings.HasPrefix(data, "add_slot_") {
			slotStr := strings.TrimPrefix(data, "add_slot_")
			go handleAddSlot(chatID, slotStr)
		} else if strings.HasPrefix(data, "calendar_") {
			dateStr := strings.TrimPrefix(data, "calendar_")
			fmt.Println("Teacher selected date:", dateStr)
			if strings.HasPrefix(dateStr, "prev_") || strings.HasPrefix(dateStr, "next_") {
				year, month, err := parseYearMonth(strings.TrimPrefix(dateStr, "prev_"))
				if err != nil {
					year, month, err = parseYearMonth(strings.TrimPrefix(dateStr, "next_"))
				}
				if err == nil {
					showMonthCalendar(chatID, year, month)
					return
				}
			}
			date, err := time.Parse("2006-01-02", dateStr)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ handleCallback:", err)
				return
			}
			if date.Before(time.Now().Truncate(24 * time.Hour)) {
				return
			}
			showTimeSlots(chatID, dateStr)
		} else if strings.HasPrefix(data, "student_calendar_") {
			dateStr := strings.TrimPrefix(data, "student_calendar_")
			fmt.Println("Student selected date:", dateStr)
			if strings.HasPrefix(dateStr, "prev_") || strings.HasPrefix(dateStr, "next_") {
				year, month, err := parseYearMonth(strings.TrimPrefix(dateStr, "prev_"))
				if err != nil {
					year, month, err = parseYearMonth(strings.TrimPrefix(dateStr, "next_"))
				}
				if err == nil {
					showStudentMonthCalendar(chatID, year, month)
					return
				}
			}
			date, err := time.Parse("2006-01-02", dateStr)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ handleCallback:", err)
				return
			}
			if date.Before(time.Now().Truncate(24 * time.Hour)) {
				return
			}
			showStudentTimeSlots(chatID, dateStr)
		} else if strings.HasPrefix(data, "book_") {
			slotIDStr := strings.TrimPrefix(data, "book_")
			slotID, err := strconv.ParseInt(slotIDStr, 10, 64)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å–ª–æ—Ç–∞.")
			} else {
				go handleBooking(chatID, slotID)
			}
		} else if strings.HasPrefix(data, "cancel_") {
			slotIDStr := strings.TrimPrefix(data, "cancel_")
			slotID, err := strconv.ParseInt(slotIDStr, 10, 64)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å–ª–æ—Ç–∞.")
			} else {
				go handleCancelBooking(chatID, slotID)
			}
		} else if strings.HasPrefix(data, "select_delete_") {
			slotIDStr := strings.TrimPrefix(data, "select_delete_")
			slotID, err := strconv.ParseInt(slotIDStr, 10, 64)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å–ª–æ—Ç–∞.")
				return
			}
			handleSelectDeleteSlot(chatID, messageID, slotID)
		} else if strings.HasPrefix(data, "delete_slot_") {
			slotIDStr := strings.TrimPrefix(data, "delete_slot_")
			slotID, err := strconv.ParseInt(slotIDStr, 10, 64)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å–ª–æ—Ç–∞.")
				return
			}
			err = DeleteScheduleSlot(slotID)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞.")
				return
			}
			buttons := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", "back_to_calendar"),
					tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back_to_menu"),
				),
			)
			sendMessageWithKeyboard(chatID, "‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", &buttons)
		} else if strings.HasPrefix(data, "mark_read_") {
			notificationIDStr := strings.TrimPrefix(data, "mark_read_")
			notificationID, err := strconv.Atoi(notificationIDStr)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
				return
			}
			err = markNotificationAsRead(notificationID)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.")
				return
			}
			notifications, err := getTeacherNotifications(chatID)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
				return
			}
			var builder strings.Builder
			builder.WriteString("üì¨ *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n")
			var buttons [][]tgbotapi.InlineKeyboardButton
			for _, n := range notifications {
				status := "üîî"
				if n.IsRead {
					status = "‚úÖ"
				}
				builder.WriteString(fmt.Sprintf("%s %s\n", status, n.Message))
				if !n.IsRead {
					buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData(
							fmt.Sprintf("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º: %s", formatTime(n.CreatedAt)),
							fmt.Sprintf("mark_read_%d", n.ID),
						),
					))
				}
			}
			buttons = append(buttons,
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", "clear_notifications"),
					tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
				),
			)
			keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
			sendMessageWithKeyboard(chatID, builder.String(), &keyboard)
		} else if data == "clear_notifications" {
			err := clearTeacherNotifications(chatID)
			if err != nil {
				sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
				return
			}
			buttons := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
				),
			)
			sendMessageWithKeyboard(chatID, "üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.", &buttons)
		} else {
			if user.Role == "teacher" {
				showTeacherMenu(chatID)
			} else {
				showStudentMenu(chatID)
			}
		}
	}

	if _, err := bot.AnswerCallbackQuery(tgbotapi.NewCallback(query.ID, "")); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:", err)
	}
}

func handleSelectDeleteSlot(chatID int64, messageID int, slotID int64) {
	err := DeleteScheduleSlot(slotID)
	if err != nil {
		editMessage(chatID, messageID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞")
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
		),
	)
	editMessageWithKeyboard(chatID, messageID, "‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", &buttons)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	showTeacherMenu(chatID)
}

func handleDeleteSchedule(chatID int64, messageID int) {
	schedules, err := getTeacherSchedule(chatID)
	if err != nil {
		editMessage(chatID, messageID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
		return
	}

	if len(schedules) == 0 {
		editMessage(chatID, messageID, "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ")
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, s := range schedules {
		buttonText := fmt.Sprintf("%s - %s", formatTime(s.StartTime), formatTime(s.EndTime))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("select_delete_%d", s.ID)),
		))
	}
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	editMessageWithKeyboard(chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", &keyboard)
}

func editMessage(chatID int64, messageID int, text string) {
	edit := tgbotapi.NewEditMessageText(chatID, messageID, text)
	edit.ParseMode = "Markdown"
	if _, err := bot.Send(edit); err != nil {
	}
}

func editMessageWithKeyboard(chatID int64, messageID int, text string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	editText := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editText.ParseMode = "Markdown"
	if _, err := bot.Send(editText); err != nil {
		return
	}

	if keyboard != nil {
		editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, *keyboard)
		if _, err := bot.Send(editMarkup); err != nil {
		}
	}
}

func showStudentMonthCalendar(chatID int64, year int, month time.Month) {
	startOfMonth := time.Date(year, month, 1, 0, 0, 0, 0, time.UTC)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	firstDay := startOfMonth.Weekday()
	firstDayOffset := (int(firstDay) - 1) % 7
	if firstDayOffset < 0 {
		firstDayOffset += 7
	}
	day := 1 - firstDayOffset

	var buttons [][]tgbotapi.InlineKeyboardButton

	navRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("<<", fmt.Sprintf("student_calendar_prev_%d-%02d", year, int(month)-1)),
		tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s %d", month.String(), year), "ignore"),
		tgbotapi.NewInlineKeyboardButtonData(">>", fmt.Sprintf("student_calendar_next_%d-%02d", year, int(month)+1)),
	}
	buttons = append(buttons, navRow)

	header := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ü–Ω", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–í—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–°—Ä", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–ß—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–°–±", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–í—Å", "ignore"),
	}
	buttons = append(buttons, header)

	for week := 0; week < 6; week++ {
		var weekRow []tgbotapi.InlineKeyboardButton
		for d := 0; d < 7; d++ {
			currentDay := day + d + week*7
			if currentDay >= 1 && currentDay <= endOfMonth.Day() {
				date := time.Date(year, month, currentDay, 0, 0, 0, 0, time.UTC)
				dateStr := date.Format("2006-01-02")
				buttonText := fmt.Sprintf("%2d", currentDay)
				var callbackData string

				if date.Before(time.Now().Truncate(24 * time.Hour)) {
					// –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
					callbackData = "ignore"
				} else {
					// –¢–µ–∫—É—â–∏–µ –∏ –±—É–¥—É—â–∏–µ –¥–Ω–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
					callbackData = fmt.Sprintf("student_calendar_%s", dateStr)
				}

				button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
				weekRow = append(weekRow, button)
			} else {
				weekRow = append(weekRow, tgbotapi.NewInlineKeyboardButtonData("  ", "ignore"))
			}
		}
		buttons = append(buttons, weekRow)
		if day+7*(week+1) > endOfMonth.Day() {
			break
		}
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	sendMessageWithKeyboard(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:", &keyboard)
}

func parseYearMonth(dateStr string) (int, time.Month, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≥–æ–¥ –∏ –º–µ—Å—è—Ü
	if len(dateStr) != 7 || dateStr[4] != '-' {
		return 0, 0, fmt.Errorf("invalid date format: %s", dateStr)
	}
	year, err := strconv.Atoi(dateStr[:4])
	if err != nil {
		return 0, 0, err
	}
	month, err := strconv.Atoi(dateStr[5:])
	if err != nil {
		return 0, 0, err
	}
	if month < 1 || month > 12 {
		return 0, 0, fmt.Errorf("invalid month: %d", month)
	}
	return year, time.Month(month), nil
}

func showMonthCalendar(chatID int64, year int, month time.Month) {
	fmt.Println("showMonthCalendar called for chatID:", chatID, "year:", year, "month:", month) // –û—Ç–ª–∞–¥–∫–∞

	startOfMonth := time.Date(year, month, 1, 0, 0, 0, 0, time.UTC)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	firstDay := startOfMonth.Weekday()
	firstDayOffset := (int(firstDay) - 1) % 7
	if firstDayOffset < 0 {
		firstDayOffset += 7
	}
	day := 1 - firstDayOffset

	var buttons [][]tgbotapi.InlineKeyboardButton

	navRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("<<", fmt.Sprintf("calendar_prev_%d-%02d", year, int(month)-1)),
		tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s %d", month.String(), year), "ignore"),
		tgbotapi.NewInlineKeyboardButtonData(">>", fmt.Sprintf("calendar_next_%d-%02d", year, int(month)+1)),
	}
	buttons = append(buttons, navRow)

	header := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–ü–Ω", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–í—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–°—Ä", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–ß—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ç", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–°–±", "ignore"),
		tgbotapi.NewInlineKeyboardButtonData("–í—Å", "ignore"),
	}
	buttons = append(buttons, header)

	for week := 0; week < 6; week++ {
		var weekRow []tgbotapi.InlineKeyboardButton
		for d := 0; d < 7; d++ {
			currentDay := day + d + week*7
			if currentDay >= 1 && currentDay <= endOfMonth.Day() {
				date := time.Date(year, month, currentDay, 0, 0, 0, 0, time.UTC)
				dateStr := date.Format("2006-01-02")
				buttonText := fmt.Sprintf("%2d", currentDay)
				var callbackData string

				if date.Before(time.Now().Truncate(24 * time.Hour)) {
					callbackData = "ignore"
				} else {
					callbackData = fmt.Sprintf("calendar_%s", dateStr)
				}

				button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
				weekRow = append(weekRow, button)
			} else {
				weekRow = append(weekRow, tgbotapi.NewInlineKeyboardButtonData("  ", "ignore"))
			}
		}
		buttons = append(buttons, weekRow)
		if day+7*(week+1) > endOfMonth.Day() {
			break
		}
	}

	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
	})

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –£–ø—Ä–æ—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É: –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ
	if lastID, exists := lastMessageID[chatID]; exists {
		deleteMessage(chatID, lastID)
		fmt.Println("Deleted previous message ID:", lastID) // –û—Ç–ª–∞–¥–∫–∞
	}
	newMsg, err := bot.Send(msg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", err) // –û—Ç–ª–∞–¥–∫–∞
		return
	}
	lastMessageID[chatID] = newMsg.MessageID
	fmt.Println("Calendar sent, new message ID:", newMsg.MessageID) // –û—Ç–ª–∞–¥–∫–∞
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
func showCalendar(chatID int64) {
	now := time.Now()
	currentYear, currentMonth, _ := now.Date()
	startOfMonth := time.Date(currentYear, currentMonth, 1, 0, 0, 0, 0, time.UTC)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
	firstDay := startOfMonth.Weekday()
	if firstDay == time.Sunday {
		firstDay = 0 // –°—á–∏—Ç–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∫ 0 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	} else {
		firstDay-- // –°–¥–≤–∏–≥–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—ã–ª 0
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	var weekRow []tgbotapi.InlineKeyboardButton
	day := 1 - int(firstDay) // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏

	for row := 0; row < 6; row++ { // –ú–∞–∫—Å–∏–º—É–º 6 –Ω–µ–¥–µ–ª—å
		weekRow = nil
		for col := 0; col < 7; col++ { // 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
			if day >= 1 && day <= endOfMonth.Day() {
				date := time.Date(currentYear, currentMonth, day, 0, 0, 0, 0, time.UTC)
				dateStr := date.Format("2006-01-02")
				color := "‚¨ú" // –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ–∫—É—â–∏–π –ª–∏ —ç—Ç–æ –¥–µ–Ω—å
				if date.Equal(now) {
					color = "üü©" // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
				slots, err := getSlotsForDate(date)
				if err == nil && len(slots) > 0 {
					hasFreeSlots := false
					for _, slot := range slots {
						if slot.Status == "free" {
							hasFreeSlots = true
							break
						}
					}
					if !hasFreeSlots {
						color = "üü•" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –¥–Ω–µ–π –±–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
					}
				}

				button := tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s %d", color, day),
					fmt.Sprintf("calendar_%s", dateStr),
				)
				weekRow = append(weekRow, button)
				day++
			} else {
				// –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
				weekRow = append(weekRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ú", "ignore"))
			}
		}
		if len(weekRow) > 0 {
			buttons = append(buttons, weekRow)
		}
		if day > endOfMonth.Day() {
			break
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	if currentMonth < time.December {
		nextMonth := time.Date(currentYear, currentMonth+1, 1, 0, 0, 0, 0, time.UTC)
		nextMonthStr := nextMonth.Format("2006-01")
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", fmt.Sprintf("calendar_next_%s", nextMonthStr)),
		))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("–ö–∞–ª–µ–Ω–¥–∞—Ä—å %s %d –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:", currentMonth, currentYear), &keyboard)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
func showTimeSlots(chatID int64, dateStr string) {
	date, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
		fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:", err, "dateStr:", dateStr)
		return
	}

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–µ–¥—à–∞—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
	if date.Before(time.Now().Truncate(24 * time.Hour)) {
		return
	}

	slots, err := getSlotsForDate(date)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤.")
		fmt.Println("–û—à–∏–±–∫–∞ getSlotsForDate:", err)
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	for hour := 9; hour < 22; hour++ {
		startTime := time.Date(date.Year(), date.Month(), date.Day(), hour, 0, 0, 0, time.UTC)
		slotExists := false
		for _, slot := range slots {
			existingStart, err := time.Parse(time.RFC3339, slot.StartTime)
			if err == nil && existingStart.Equal(startTime) {
				slotExists = true
				break
			}
		}

		color := "‚¨ú"                       // –ë–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if !startTime.Before(time.Now()) { // –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –∏ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è
			if slotExists {
				color = "üü•" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			} else {
				color = "üü©" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			}
		}

		timeKey := fmt.Sprintf("%s_%02d:00", dateStr, hour)
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%02d:00\n%s", hour, color), // –ß–∞—Å—ã –Ω–∞–¥ —Ü–≤–µ—Ç–æ–º
			fmt.Sprintf("add_slot_%s", timeKey),
		)
		row = append(row, btn)
		if len(row) == 4 {
			buttons = append(buttons, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}

	if len(row) > 0 {
		buttons = append(buttons, row)
	}

	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", "add_slot"),
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
	})

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	if lastID, exists := lastMessageID[chatID]; exists {
		deleteMessage(chatID, lastID)
	}
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üïí *–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –Ω–∞ %s:*\n\nüü© - –°–≤–æ–±–æ–¥–Ω–æ\nüü• - –ó–∞–Ω—è—Ç–æ", dateStr))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	newMsg, err := bot.Send(msg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:", err)
		return
	}
	lastMessageID[chatID] = newMsg.MessageID
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
func handleAddSlot(chatID int64, slotStr string) {
	parts := strings.Split(slotStr, "_")
	if len(parts) != 2 {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ—Ç–∞.")
		return
	}
	dateStr := parts[0]
	timeStr := parts[1]

	date, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞.")
		return
	}
	timeParts := strings.Split(timeStr, ":")
	if len(timeParts) != 2 {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è.")
		return
	}
	hour, err := strconv.Atoi(timeParts[0])
	if err != nil || hour < 0 || hour > 23 {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å.")
		return
	}
	minute, err := strconv.Atoi(timeParts[1])
	if err != nil || minute < 0 || minute > 59 {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –º–∏–Ω—É—Ç–∞.")
		return
	}

	startTime := time.Date(date.Year(), date.Month(), date.Day(), hour, minute, 0, 0, time.UTC)
	if startTime.Before(time.Now()) {
		sendMessage(chatID, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
		return
	}

	endTime := startTime.Add(1 * time.Hour)
	startTimeStr := startTime.Format(time.RFC3339)
	endTimeStr := endTime.Format(time.RFC3339)

	var slotID int64
	err = db.QueryRow(
		`SELECT id FROM schedules WHERE teacher_id = ? AND start_time = ?`,
		chatID, startTimeStr).Scan(&slotID)

	if err == nil {
		buttons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", fmt.Sprintf("delete_slot_%d", slotID)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", "back_to_calendar"),
				tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back_to_menu"),
			),
		)
		sendMessageWithKeyboard(chatID, fmt.Sprintf("–°–ª–æ—Ç %s - %s —É–∂–µ –∑–∞–Ω—è—Ç. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?", startTime.Format("15:04"), endTime.Format("15:04")), &buttons)
		return
	}

	err = addScheduleSlot(chatID, startTimeStr, endTimeStr)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞.")
		return
	}

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", "back_to_calendar"),
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back_to_menu"),
		),
	)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: %s - %s", startTime.Format("15:04"), endTime.Format("15:04")), &buttons)
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–¥–ª—è —É—á–∏—Ç–µ–ª—è)
func handleTeacherSchedule(chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —É—á–∏—Ç–µ–ª—è
	user, err := getUser(chatID)
	if err != nil || user.Role != "teacher" {
		sendMessage(chatID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º")
		return
	}

	schedules, err := getTeacherSchedule(chatID)
	if err != nil {
		sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
		return
	}

	if len(schedules) == 0 {
		sendMessage(chatID, "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ")
		return
	}

	var builder strings.Builder
	builder.WriteString("üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n")

	for _, s := range schedules {
		builder.WriteString(fmt.Sprintf(
			"‚è∞ %s - %s\nüîÑ –°—Ç–∞—Ç—É—Å: %s\n",
			formatTime(s.StartTime),
			formatTime(s.EndTime),
			statusToEmoji(s.Status),
		))
	}

	// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –Ω–∞–∑–∞–¥)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_schedule"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	sendMessageWithKeyboard(chatID, builder.String(), &keyboard)
}

func statusToEmoji(status string) string {
	if status == "booked" {
		return "‚úÖ –ó–∞–Ω—è—Ç"
	}
	return "üÜì –°–≤–æ–±–æ–¥–µ–Ω"
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–µ–Ω–∏–∫–æ–≤ (–¥–ª—è —É—á–∏—Ç–µ–ª—è)
func handleTeacherStudents(chatID int64) {
	students, err := getTeacherStudents(chatID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤.")
		return
	}

	if len(students) == 0 {
		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
			),
		)
		sendMessageWithKeyboard(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.", &keyboard)
		return
	}

	var builder strings.Builder
	builder.WriteString("üë• *–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:*\n")
	for _, s := range students {
		builder.WriteString(fmt.Sprintf(
			"üë§ @%s - %s (%s)\n",
			s.StudentUsername,
			formatTime(s.StartTime),
			s.Direction,
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫–∏ –µ—Å—Ç—å
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	sendMessageWithKeyboard(chatID, builder.String(), &keyboard)
}

// –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ (–¥–ª—è —É—á–µ–Ω–∏–∫–∞)
func handleStudentBook(chatID int64) {
	showStudentCalendar(chatID)
}

func showStudentCalendar(chatID int64) {
	now := time.Now()
	currentYear, currentMonth, _ := now.Date()
	startOfMonth := time.Date(currentYear, currentMonth, 1, 0, 0, 0, 0, time.UTC)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
	firstDay := startOfMonth.Weekday()
	if firstDay == time.Sunday {
		firstDay = 0 // –°—á–∏—Ç–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∫ 0
	} else {
		firstDay-- // –°–¥–≤–∏–≥–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—ã–ª 0
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	var weekRow []tgbotapi.InlineKeyboardButton
	day := 1 - int(firstDay) // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞

	for row := 0; row < 6; row++ { // –ú–∞–∫—Å–∏–º—É–º 6 –Ω–µ–¥–µ–ª—å
		weekRow = nil
		for col := 0; col < 7; col++ { // 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
			if day >= 1 && day <= endOfMonth.Day() {
				date := time.Date(currentYear, currentMonth, day, 0, 0, 0, 0, time.UTC)
				dateStr := date.Format("2006-01-02")
				color := "‚¨ú" // –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ–∫—É—â–∏–π –ª–∏ —ç—Ç–æ –¥–µ–Ω—å
				if date.Equal(now) {
					color = "üü©" // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
				slots, err := getAvailableSlotsForDate(date)
				if err == nil && len(slots) > 0 {
					color = "üü©" // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è –¥–Ω–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
				} else if err != nil || len(slots) == 0 {
					color = "üü•" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –¥–Ω–µ–π –±–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
				}

				button := tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s %d", color, day),
					fmt.Sprintf("student_calendar_%s", dateStr),
				)
				weekRow = append(weekRow, button)
				day++
			} else {
				// –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
				weekRow = append(weekRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ú", "ignore"))
			}
		}
		if len(weekRow) > 0 {
			buttons = append(buttons, weekRow)
		}
		if day > endOfMonth.Day() {
			break
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var navRow []tgbotapi.InlineKeyboardButton
	if currentMonth > time.January {
		prevMonth := time.Date(currentYear, currentMonth-1, 1, 0, 0, 0, 0, time.UTC)
		prevMonthStr := prevMonth.Format("2006-01")
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", fmt.Sprintf("student_calendar_next_%s", prevMonthStr)))
	}
	if currentMonth < time.December {
		nextMonth := time.Date(currentYear, currentMonth+1, 1, 0, 0, 0, 0, time.UTC)
		nextMonthStr := nextMonth.Format("2006-01")
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", fmt.Sprintf("student_calendar_next_%s", nextMonthStr)))
	}
	if len(navRow) > 0 {
		buttons = append(buttons, navRow)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("–ö–∞–ª–µ–Ω–¥–∞—Ä—å %s %d –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:", currentMonth, currentYear), &keyboard)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–æ—Ç–æ–≤ —É—á–µ–Ω–∏–∫—É
func showStudentTimeSlots(chatID int64, dateStr string) {
	date, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã.")
		return
	}

	slots, err := getAvailableSlotsForDate(date)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤.")
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	for _, slot := range slots {
		startTime, err := time.Parse(time.RFC3339, slot.StartTime)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞:", err)
			continue
		}
		color := "üü©" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
		if startTime.Before(time.Now()) {
			color = "üî¥" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		}

		hour := startTime.Hour()
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%02d:00\n%s", hour, color), // –ß–∞—Å—ã –Ω–∞–¥ —Ü–≤–µ—Ç–æ–º
			fmt.Sprintf("book_%d", slot.ID),
		)
		row = append(row, btn)
		if len(row) == 3 {
			buttons = append(buttons, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}

	if len(row) > 0 {
		buttons = append(buttons, row)
	}

	navRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", "student_book"),
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
	}
	buttons = append(buttons, navRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("‚úÖ *–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ %s:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", dateStr), &keyboard)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
func getAvailableSlotsForDate(date time.Time) ([]Schedule, error) {
	startOfDay := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.UTC).Format(time.RFC3339)
	endOfDay := time.Date(date.Year(), date.Month(), date.Day(), 23, 59, 59, 0, time.UTC).Format(time.RFC3339)

	query := `SELECT id, start_time, end_time, status 
        FROM schedules 
        WHERE status = 'free' 
        AND start_time BETWEEN ? AND ? 
        ORDER BY start_time`
	rows, err := db.Query(query, startOfDay, endOfDay)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: %v", err)
	}
	defer rows.Close()

	var slots []Schedule
	for rows.Next() {
		var s Schedule
		if err := rows.Scan(&s.ID, &s.StartTime, &s.EndTime, &s.Status); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤: %v", err)
		}
		slots = append(slots, s)
	}
	return slots, nil
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —É—á–µ–Ω–∏–∫–∞)
func handleStudentBookings(chatID int64) {
	bookings, err := getStudentBookings(chatID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	if len(bookings) == 0 {
		buttons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
			),
		)
		sendMessageWithKeyboard(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", &buttons)
		return
	}

	var builder strings.Builder
	builder.WriteString("üóì *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n")
	for _, b := range bookings {
		builder.WriteString(fmt.Sprintf(
			"üïí %s - %s (%s)\n",
			formatTime(b.StartTime),
			formatTime(b.EndTime),
			b.Direction.String,
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
		),
	)
	sendMessageWithKeyboard(chatID, builder.String(), &buttons)
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ (–¥–ª—è —É—á–µ–Ω–∏–∫–∞)
func handleStudentCancel(chatID int64) {
	bookings, err := getStudentBookings(chatID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.")
		return
	}

	if len(bookings) == 0 {
		buttons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
			),
		)
		sendMessageWithKeyboard(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", &buttons)
		return
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, b := range bookings {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üïí %s", formatTime(b.StartTime)),
				fmt.Sprintf("cancel_%d", b.ID),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	sendMessageWithKeyboard(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", &keyboard)
}

func getUsername(chatID int64) string {
	var username string
	err := db.QueryRow("SELECT username FROM users WHERE telegram_id = ?", chatID).Scan(&username)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ username –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username:", err)
		return fmt.Sprintf("ID%d", chatID)
	}
	if username == "" {
		return fmt.Sprintf("ID%d", chatID)
	}
	return username
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
func handleBooking(chatID int64, slotID int64) {
	slot, err := getScheduleByID(slotID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	if slot.Status != "free" {
		sendMessage(chatID, "–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
	startTime, err := time.Parse(time.RFC3339, slot.StartTime)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞.")
		return
	}
	if startTime.Before(time.Now()) {
		sendMessage(chatID, "–ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
		return
	}

	direction := "–û–±—â–µ–µ"
	if slot.Direction.Valid {
		direction = slot.Direction.String
	}
	studentID := chatID

	err = updateScheduleStatus(slotID, "booked", studentID, direction)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.")
		return
	}

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
		),
	)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ: %s", formatTime(slot.StartTime)), &buttons)

	teacherID := slot.TeacherID
	teacherMsg := fmt.Sprintf("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n%s - %s\n–£—á–µ–Ω–∏–∫: @%s\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s",
		formatTime(slot.StartTime),
		formatTime(slot.EndTime),
		getUsername(chatID),
		direction)
	err = addNotification(teacherID, teacherMsg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏:", err)
	}

	showTeacherMenu(teacherID)
}

// handlers.go
func handleCancelBooking(chatID int64, slotID int64) {
	slot, err := getScheduleByID(slotID)
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	if !slot.StudentID.Valid || slot.StudentID.Int64 != chatID {
		sendMessage(chatID, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å.")
		return
	}

	err = updateScheduleStatus(slotID, "free", 0, "")
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "back_to_menu"),
		),
	)
	sendMessageWithKeyboard(chatID, fmt.Sprintf("–ó–∞–ø–∏—Å—å –Ω–∞ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", formatTime(slot.StartTime)), &buttons)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
	teacherID := slot.TeacherID
	teacherMsg := fmt.Sprintf("–£—á–µ–Ω–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–Ω—è—Ç–∏–µ:\n%s - %s\n–£—á–µ–Ω–∏–∫: @%s",
		formatTime(slot.StartTime),
		formatTime(slot.EndTime),
		getUsername(chatID))
	err = addNotification(teacherID, teacherMsg)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ:", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è
	showTeacherMenu(teacherID)
}
